datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String           @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  role             Role             @default(User)

  pushSubscription PushSubscriber[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String
  auth      String
  p256dh    String
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  tags        String[] @default([])

  courses     Course[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  tags        String[] @default([])

  categoryId  String?  @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  // purchases   Purchase[]
  // questions   Question[]
  // teachers    CourseTeacher[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}


model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  videoThumbnail String?
  videoLength   Int?
  videoPlayer   String?
  position      Int?
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)

  courseId      String         @db.ObjectId
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  UserProgress[]
  attachments   Attachment[]
  // questions     Question[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courseId])
}

model Attachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
}


model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  userId      String   @db.ObjectId

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}


